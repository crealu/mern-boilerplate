{
	"presets": [
		"@babel/preset-env",
		"@babel/preset-react"
	]
}
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const MongoClient = require('mongodb').MongoClient;
const uri = require('keyconfig').MongoURI;
const port = process.env.PORT || 9000;
const app = express();
const client = new MongoClient(uri);

async function connectToDB() {
	await client.connect( err => {
    err ? console.log(err) : console.log('Connected to database');
  });
}
connectToDB();

const pathToBuild = path.join(__dirname, 'build');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(pathToBuild));
app.get('/', (req, res) => { res.sendFile(pathToBuild, 'index.html'); });
app.listen(port, () => console.log('Listening on ' + port));
const path = require('path');
    const HtmlWebPackPlugin = require('html-webpack-plugin');

    module.exports = {
      output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js'
      },
      resolve: {
        modules: [path.join(__dirname, 'src'), 'node_modules'],
        alias: {
          react: path.join(__dirname, 'node_modules', 'react')
        }
      },
      module: {
        rules: [
          {
            test: /\.(js|jsx)$/,
            exclude: /node_modules/,
            use: {
              loader: 'babel-loader'
            },
          },
          {
            test: /\.css/,
            use: [
              {
                loader: 'style-loader'
              },
              {
                loader: 'css-loader'
              }
            ]
          }
        ]
      },
      plugins: [
        new HtmlWebPackPlugin({
          template: './src/index.html'
        })
      ],
      devServer: {
        port: 9000
      }
    }
